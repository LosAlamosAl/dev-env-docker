# Helpful head start from https://github.com/SanderKnape/cognito-apigateway-jwt
#
# aws cloudformation create-stack --stack-name explore --template-body file://explore-cfn.yml
# aws cloudformation update-stack --stack-name explore --template-body file://explore-cfn.yml
# aws cloudformation delete-stack --stack-name explore
# aws cloudformation describe-stacks --stack-name explore --query "Stacks[].Outputs[].OutputValue"
# aws cloudformation describe-stack-events --stack-name explore
# aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE
# aws cloudformation list-stack-resources --stack-name explore --query "StackResourceSummaries[].LogicalResourceId"
# aws cloudformation list-stack-resources --stack-name explore --query 'StackResourceSummaries[].[LogicalResourceId, PhysicalResourceId,ResourceType]' --output table
# must use --capabilities CAPABILITY_NAMED_IAM when creating a role
# aws cloudformation create-stack --stack-name explore --template-body file://explore-cfn.yml --capabilities CAPABILITY_NAMED_IAM
# curl -k -i (if you get curl: (60) SSL: no alternative certificate...)
# curl -w '\n' -i https://...  (gets rud of the % at the end of cURL's returned data)
AWSTemplateFormatVersion: 2010-09-09
Description: Exploring AWS HTTP API Gateway

Parameters:

  LambdaFunctionName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
    Default: explore-lambda
  ApiStageName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$
    Default: dev

Resources:

  ExploreLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: explore-log
      RetentionInDays: 3

  # Thanks https://ldoughty.com/2020/01/aws-http-api-gateway-cloudformation-setup/
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Join [/,["/aws/lambda", !Ref ExploreLambda ]]
      RetentionInDays: 3

  ExploreLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Role: !GetAtt ExploreLambdaRole.Arn
      Runtime: nodejs14.x
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event, context) => {     
            // console.log("ENVIRONMENT VARIABLES\n" + JSON.stringify(process.env, null, 2))
            // console.info("EVENT\n" + JSON.stringify(event, null, 2))
            console.log("\n" +
                        "routeKey:       " + event.routeKey       + "\n" +
                        "rawPath:        " + event.rawPath        + "\n" +
                        "rawQueryString: " + event.rawQueryString)
            // console.warn("Event not processed")
            const response = {
              statusCode: 200,
              body: "Lambda: success"
            }
            return response
          }
      MemorySize: 128
      Timeout: 30
  
  ExploreLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns: 
       - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  # After a million searches, finally found this:
  #   https://serverlessland.com/patterns/apigw-lambda
  # The SourceArn allows invoke on all paths (could scope it down to specific path)
  # See the Integration Details pane in the console to see an example.
  ExploreLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ExploreLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ExploreApiV2}/*'

  ExploreApiV2:
    Type: AWS::ApiGatewayV2::Api
    Properties: 
      Name: explore
      Description: 'Play around with HTTP APIs'
      Version: v0
      # DisableExecuteApiEndpoint: true
      ProtocolType: HTTP
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigatewayv2-api-cors.html
      CorsConfiguration:
        AllowMethods: [GET]
        AllowHeaders: [Content-Type,X-Amz-Date,Authorization,X-Api-Key,Access-Control-Allow-Origin]
        AllowOrigins: ["*"]

  ExploreUrlRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      RouteKey: GET /url/{greed+}
      ApiId: !Ref ExploreApiV2
      # Can't find this integrations/ thing in any doc, but stack create
      # fails with an error that says it's required.
      Target: !Sub "integrations/${ExploreUrlIntegration}"

  ExploreUrlIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ExploreApiV2
      IntegrationType: HTTP_PROXY
      IntegrationMethod: GET
      IntegrationUri: http://httpbin.org/anything
      RequestParameters:
        # Remove mappings using:  (note no single quotes within double quotes)
        # "remove:querystring.key1": ""  
        # "remove:querystring.key2": ""
        "remove:querystring.key1": "''"
        "remove:querystring.key2": "''"
        "overwrite:path": "anything/$request.path"
      ResponseParameters:
        "200":
          "ResponseParameters":
            - Destination: "overwrite:header.content-type"
              Source: "text/plain"
        # If the 404 is generated by API Gateway it's not replaced.
        # Need to test if it IS replaced if the integration returns the 404.
        # Use http://httpbin.org/status/404 to test
        "404":
          "ResponseParameters":
            - Destination: "overwrite:statuscode"
              # Remove previously added parameter
              Source: ""
      PayloadFormatVersion: 1.0

  ExploreLambdaRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      RouteKey: GET /lambda/{greed+}
      ApiId: !Ref ExploreApiV2
      # Can't find this integrations/ thing in any doc, but stack create
      # fails with an error that says it's required.
      # Could probably use a JOIN as in LambdaLogGroup above
      Target: !Sub "integrations/${ExploreLambdaIntegration}"

  ExploreLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ExploreApiV2
      IntegrationType: AWS_PROXY
      IntegrationMethod: GET
      IntegrationUri: !GetAtt ExploreLambda.Arn
      # If lambda function returns a 404 it's replaced with a 201
      ResponseParameters:
        "404":
          "ResponseParameters":
            - Destination: "overwrite:statuscode"
              # Source: "201"
              # Use empty string to REMOVE a previpusly added ResponseParameter
              Source: ""
      PayloadFormatVersion: 2.0

  # https://stackoverflow.com/a/70955124/227441
  # https://ldoughty.com/2020/01/aws-http-api-gateway-cloudformation-setup/
  # https://dev.to/lubanasachin/cloudformation-http-api-gateway-with-dns-4kg5
  # Must use HTTPS to connect (even without a custom domain).
  # Have to change the DNS ALIAS record (at Namecheap) for every new target URL.
  # Needto point the subdomain ALIAS at the d- endpoint in the custom domain.
  # How do we get that endpoint using the CLI?
  # Too bad there is not some level of indirection that would make that unnecessary.
  # Request a certificate with the CLI.
  ExploreDomainName:
    Type: 'AWS::ApiGatewayV2::DomainName'
    Properties:
      DomainName: aws.9al.run
      DomainNameConfigurations:
        - EndpointType: REGIONAL
          CertificateArn: arn:aws:acm:us-west-1:179645850923:certificate/f550ac4e-677e-42b3-8bdd-40c3cc3ff8d0

  ExploreApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      DomainName: aws.9al.run
      ApiMappingKey: explore-api
      ApiId: !Ref ExploreApiV2
      Stage: !Ref ExploreStage

  # aws logs tail explore-log
  ExploreStage:
    Metadata:
      Comment: |
        This is some arbitrary text.
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref ApiStageName
      ApiId: !Ref ExploreApiV2
      AutoDeploy: true
      # All routes default
      DefaultRouteSettings:
        ThrottlingBurstLimit: 5
        ThrottlingRateLimit: 10
      # Per-route overrides
      RouteSettings:
        {"GET /url/{greed+}":{"ThrottlingBurstLimit":10,"ThrottlingRateLimit":20}}
      AccessLogSettings:
        DestinationArn: !GetAtt ExploreLogGroup.Arn
        Format: 'requestId: $context.requestId
          integrationLatency: $context.integrationLatency
          responseLatency: $context.responseLatency
          integrationErrorMessage: $context.integrationErrorMessage
          httpMethod: $context.httpMethod
          routeKey: $context.routeKey
          path: $context.path'

Outputs:
  ExploreApiV2Url:
    Value: !Sub "https://${ExploreApiV2}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${ApiStageName}"